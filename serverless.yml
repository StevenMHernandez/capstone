# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: zeebo-diagram # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  timeout: 10
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ec2:Describe*
        - ec2:Get*
        - rds:Describe*
        - rds:List*
        - rds:Download*
        - elb:Describe*
        - elb:Get*
        - elasticloadbalancing:Describe*
        - elasticbeanstalk:Check*
        - elasticbeanstalk:Describe*
        - elasticbeanstalk:List*
        - elasticbeanstalk:Request*
        - elasticbeanstalk:Retrieve*
        - elasticbeanstalk:Validate*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - s3:PutObject
      Resource: "arn:aws:s3:::zeebo"
    - Effect: 'Allow'
      Action:
        - "sns:Publish"
      Resource:
        - ${self:custom.ZeeboQueueTopic}

  environment:
    CHATBOT_TOKEN: ${file(./.env.yml):CHATBOT_TOKEN}
    S3_ACCESS_KEY: ${file(./.env.yml):S3_ACCESS_KEY}
    S3_SECRET_KEY: ${file(./.env.yml):S3_SECRET_KEY}
    PLANTUML_SERVER_URL: ${file(./.env.yml):PLANTUML_SERVER_URL}
    SNS_ZEEBO_QUEUE_TOPIC: ${self:custom.ZeeboQueueTopic}

custom:
  ZeeboQueueTopic:
    Fn::Join:
      - ":"
      - - arn
        - aws
        - sns
        - Ref: AWS::Region
        - Ref: AWS::AccountId
        - zeebo-queue-topic

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  buildDiagram:
    handler: handler.buildDiagram
    events:
      - http: POST /
  listASV:
    handler: slackBotASVListHandler.listASV
    events:
      - http: POST /list-asvs
  listAssets:
    handler: listAssetsResponseHandler.listAssets
    events:
      - http: POST /list-assets
  snsConsumer:
    handler: slackBotResponseHandler.buildDiagram
    events:
      - sns: zeebo-queue-topic
        topicName: zeebo-queue-topic
        displayName: Topic to handle generating and returning diagram to slack

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
